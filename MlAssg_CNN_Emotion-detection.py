# -*- coding: utf-8 -*-
"""MLAssg-CNN-EmotionDetection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CuqNyp43UTIIWHwYeQwmoZoIu66DZgPj
"""

!unzip /content/drive/MyDrive/photos.zip

import matplotlib.pyplot as plt
from tensorflow.keras.layers import Dense, Flatten, Dropout, MaxPooling2D, Conv2D, BatchNormalization
from tensorflow.keras.preprocessing.image import ImageDataGenerator, load_img, img_to_array
from tensorflow.keras.models import Model, Sequential
import os

"""## Checking the access to the images"""

folder_path = "/content/images/"
name = 'happy'

plt.figure(figsize= (12,12))
for i in range(1, 10, 1):
    plt.subplot(3,3,i)
    img = load_img(folder_path+"train/"+name+"/"+
                  os.listdir(folder_path + "train/" + name)[i], target_size=(48, 48))
    plt.imshow(img)
plt.show()

datagen_train  = ImageDataGenerator()
datagen_val = ImageDataGenerator()
batch_size=128
#shuffle is default true, we make it false for the testdata:
trainData = datagen_train.flow_from_directory(folder_path+"train",target_size = (50,50),color_mode = "grayscale",batch_size=batch_size,class_mode='categorical')
testData = datagen_val.flow_from_directory(folder_path+"validation",target_size = (50,50),color_mode = "grayscale",batch_size=batch_size,class_mode='categorical',shuffle=False)

import numpy as np
trainLabels = np.array(trainData.labels)
testLabels = np.array(testData.labels)

#total classes or categories=7
nc=7
model=Sequential()
model.add(Conv2D(64, (3, 3), padding='same',activation='relu', input_shape=(48, 48, 1)))
model.add(BatchNormalization())
model.add(MaxPooling2D((2, 2)))
model.add(Conv2D(128, (3, 3), padding='same', activation='relu'))
model.add(BatchNormalization())
model.add(MaxPooling2D((2, 2)))
model.add(Dropout(0.2))
model.add(Flatten())
model.add(Dense(256, activation='relu'))
model.add(Dense(7, activation='softmax'))

model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
r = model.fit(trainData,epochs=10,validation_data=testData)

plt.plot(r.history['loss'], label='Training Loss')
plt.plot(r.history['val_loss'], label='Validation Loss')
plt.legend()

plt.plot(r.history['accuracy'], label='Training Accuracy')
plt.plot(r.history['val_accuracy'], label='Validation Accuracy')
plt.legend()

tlos, tacc = model.evaluate(testData)
print("Test loss: ", tlos)
print("Test accuracy: ", tacc)

labels=['surprise', 'sad', 'neutral','happy','fear','disgust','angry']

import tensorflow as tf
image = tf.io.read_file('/content/drive/MyDrive/9935.jpg')
# Preprocess the image
image = tf.image.decode_jpeg(image)
image = tf.image.resize(image, (48, 48))
image=np.expand_dims(image,0)
image.shape

# Make a prediction on the image
prediction = model.predict(image)
# Get the class with the highest probability
class_index = np.argmax(prediction)
# Print the class with the highest probability
print('Predicted class:', labels[class_index])

"""Misclassifications:"""

image = tf.io.read_file('/content/drive/MyDrive/9747.jpg')
# Preprocess the image
image = tf.image.decode_jpeg(image)
image = tf.image.resize(image, (48, 48))
image=np.expand_dims(image,0)
# Make a prediction on the image
prediction = model.predict(image)
# Get the class with the highest probability
class_index = np.argmax(prediction)
# Print the class with the highest probability
print('Predicted class:', labels[class_index])

image = tf.io.read_file('/content/drive/MyDrive/9908.jpg')
# Preprocess the image
image = tf.image.decode_jpeg(image)
image = tf.image.resize(image, (48, 48))
image=np.expand_dims(image,0)
# Make a prediction on the image
prediction = model.predict(image)
# Get the class with the highest probability
class_index = np.argmax(prediction)
# Print the class with the highest probability
print('Predicted class:', labels[class_index])

import cv2
img = cv2.imread('/content/newimg.jpeg')
#image_np = np.array(img)
img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
img = cv2.resize(img,(48,48))
image=np.expand_dims(img,0)
# Make a prediction on the image
prediction = model.predict(image)
# Get the class with the highest probability
class_index = np.argmax(prediction)
# Print the class with the highest probability
print('Predicted class:', labels[class_index])
plt.imshow(img)

img = cv2.imread('/content/newimg1.jpg')
#image_np = np.array(img)
img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
img = cv2.resize(img,(48,48))
image=np.expand_dims(img,0)
# Make a prediction on the image
prediction = model.predict(image)
# Get the class with the highest probability
class_index = np.argmax(prediction)
# Print the class with the highest probability
print('Predicted class:', labels[class_index])
plt.imshow(img)

fp='/content/drive/MyDrive/testImg'
plt.figure(figsize= (12,12))
x=1
for i in os.listdir(fp):
    imgpath = os.path.join(fp,i)
    img = cv2.imread(imgpath)
    img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    img = cv2.resize(img,(48,48))
    image=np.expand_dims(img,0)
    # Make a prediction on the image
    prediction = model.predict(image)
    # Get the class with the highest probability
    class_index = np.argmax(prediction)
    # Print the class with the highest probability
    #print('Predicted class:', labels[class_index])
    plt.subplot(4,3,x)
    x+=1
    plt.title(labels[class_index])
    plt.imshow(img)

img = cv2.imread('/content/f.png')
#image_np = np.array(img)
img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
img = cv2.resize(img,(48,48))
image=np.expand_dims(img,0)
# Make a prediction on the image
prediction = model.predict(image)
# Get the class with the highest probability
class_index = np.argmax(prediction)
# Print the class with the highest probability
print('Predicted class:', labels[class_index])
plt.imshow(img)